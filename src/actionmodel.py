from abc import ABC, abstractmethod
from random import choice

from openai import OpenAI
from openai.types.responses import EasyInputMessageParam
from dotenv import load_dotenv

from .state import AgentObservation
from .action import Decision, SkipTurn, Give, Take, Speak


load_dotenv()


class BaseActionModel(ABC):
    @abstractmethod
    def decide(self, obs: AgentObservation) -> Decision:
        pass


class AlwaysSkipModel(BaseActionModel):
    def decide(self, obs: AgentObservation) -> Decision:
        return Decision(reasoning="I always skip my turn", action=SkipTurn())


class RandomActionModel(BaseActionModel):
    """
    Randomly select an action.

    Args:
        trxn_amount (int): if the `give` or `take` action selected, this is the amount used
         in the decision.
    """

    def __init__(self, trxn_amount: int):
        self._trxn_amt = trxn_amount

    def decide(self, obs: AgentObservation) -> Decision:
        selection = choice(["give", "take", "speak", "skip"])
        reasoning = "I just randomly choose an action."
        if selection == "give":
            target = choice(obs.env_obs.alive_agents)
            return Decision(
                reasoning=reasoning, action=Give(target=target, amount=self._trxn_amt)
            )
        if selection == "take":
            target = choice(obs.env_obs.alive_agents)
            return Decision(
                reasoning=reasoning, action=Take(target=target, amount=self._trxn_amt)
            )
        if selection == "speak":
            return Decision(reasoning=reasoning, action=Speak(message="Beep, boop."))
        return Decision(reasoning=reasoning, action=SkipTurn())


class GPT4Model(BaseActionModel):
    def __init__(self, model_name: str = "gpt-4.1-2025-04-14") -> None:
        self._client = OpenAI()
        self._model_name = model_name

    def decide(self, obs: AgentObservation):
        response = self._client.responses.parse(
            model=self._model_name,
            input=obs.agent_state.messages,  # type: ignore
            text_format=Decision,
        )
        if not response.output_parsed:
            raise ValueError("A response was not generated by the model")

        obs.agent_state.messages.append(
            EasyInputMessageParam(role="assistant", content=response.output_text)
        )
        return response.output_parsed
